<div id="document">
	<div class="page" onkeypress="">
		<p class="text-end text-muted m-2">{{ document.text.length }} characters</p>
		<textarea placeholder="Enter your text..."
				  v-model="document.text"></textarea>
	</div>
	<div class="modal fade" id="modalDocument" tabindex="-1" role="dialog" aria-labelledby="modalDocument" aria-hidden="true">
		<div class="modal-dialog" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">Document Title</h5>
					<button type="button" class="btn close" data-bs-dismiss="modal" aria-label="Close">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body">
					<div class="mb-4">
						<label for="title" class="form-label fw-semibold">Title</label>
						<input type="text" id="title" name="title" v-model="document.title"
							   class="form-control shadow-sm"
							   placeholder="My document" required maxlength="256" />
					</div>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
					<button type="button" class="btn btn-primary" v-on:click="saveDocument">Save</button>
				</div>
			</div>
		</div>
	</div>
</div>

@section scripts {
	<script>
		Vue.use(Toasted, {
			position: 'bottom-center',
			duration: 3000
		});

		var vue = new Vue({
		
			el: '#document',
			data: {
				document: {
					id: '',
					text: '',
					title: ''
				}
			},
			methods: {
				convertToDocumentViewModel: function(){
					return {
						Id: this.document.id,
						Title: this.document.title,
						Text: this.document.text,
						Type: 'Text',
					}
				},
				openDocumentModal: function(){
					$("#modalDocument").modal('show');
				},
				closeDocumentModal: function(){
					$("#modalDocument").modal('hide');
				},
				loadDocument: function(){
					let self = this;
					$.ajax({
						type: 'GET',
						url: `@Url.Action("GetById", "Document")?documentId=${this.document.id}`,
						dataType: 'json',
						contentType: 'application/json; charset=utf-8',
						success: function(response){
							self.document.id = response.id;
							self.document.text = response.text;
							self.document.title= response.title;
						},
						error: function(){
							self.$toasted.error("Document unavailable.");
						}
					})
				},
				updateDocument: function(){
					let self = this;
					const data = self.convertToDocumentViewModel();
					$.ajax({
						type: 'PUT',
						url: '@Url.Action("Update", "Document")',
						dataType: 'JSON',
						contentType: 'application/json; charset=utf-8',
						data: JSON.stringify(data),
						error: function(){
							self.$toasted.success('An error ocurred in update document.');
						},
						success: function(){
							self.$toasted.success('Document updated.');
						}
					})
				},
				saveDocument: function(){
					let self = this;
					const data = self.convertToDocumentViewModel();
					$.ajax({
						type: 'POST',
						url: '@Url.Action("Save", "Document")',
						dataType: 'json',
						data: JSON.stringify(data),
						contentType: 'application/json; charset=utf-8',
						error: function(){
							self.$toasted.error("An error ocurred in save document.");
						},
						success: function(){
							self.closeDocumentModal();
							self.$toasted.success('Document saved.');
						},
					});
				},
				getDocumentId: function(){
					let queryString = new URLSearchParams(window.location.search);

					return queryString.get('documentId');
				}
			},
			mounted: function(){
				this.document.id = this.getDocumentId();

				if(this.document.id){
					this.loadDocument();
				}
			}
		});

		document.addEventListener('keydown', e => {
		  if (e.ctrlKey && e.key === 's') {
			e.preventDefault();
			if(vue.document.id){
				vue.updateDocument();
			}
			else {
				vue.openDocumentModal();
			}
			console.log('CTRL + S');
		  }
		});
	</script>
}
